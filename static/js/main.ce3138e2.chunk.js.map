{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","react_default","a","createElement","className","Movie_MoviePoster","poster","this","props","title","genres","map","genre","index","Movie_MovieGenre","key","lib_default","text","synopsis","maxLine","elipsiis","trimRight","basedOn","Component","MoviePoster","src","alt","MovieGenre","App","state","_renderMovies","_this","movies","movie","src_Movie_0","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAKMA,0LAQF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaC,OAAQC,KAAKC,MAAMF,UAElCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAMC,OAChBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZG,KAAKC,MAAME,OAAOC,IAAI,SAACC,EAAOC,GAAR,OACrBZ,EAAAC,EAAAC,cAACW,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAGnCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACEe,KAAMV,KAAKC,MAAMU,SACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,sBA1BFC,cAkCdC,mLAKF,OAAOvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAKlB,KAAKC,MAAMF,OAAQoB,IAAI,uBALlBH,aASpBI,mLAKF,OAAO1B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBG,KAAKC,MAAMI,cAL7BW,aAQVvB,ICUA4B,6MA1DbC,MAAQ,KAgBRC,cAAgB,WAad,OAZeC,EAAKF,MAAMG,OAAOrB,IAAI,SAAAsB,GAEnC,OACEhC,EAAAC,EAAAC,cAAC+B,EAAD,CACEzB,MAAOwB,EAAME,cACb7B,OAAQ2B,EAAMG,mBACdrB,IAAKkB,EAAMI,GACX3B,OAAQuB,EAAMvB,OACdQ,SAAUe,EAAMf,gBAOxBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAtC,EAAAuC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,EAAAhC,WAObsC,SAAW,WACT,OAAOI,MACL,iEAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAzC5BhD,KAAK+B,8CA4CE,IACCN,EAAWzB,KAAKsB,MAAhBG,OACR,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAW4B,EAAS,MAAQ,gBAC9BA,EAASzB,KAAKuB,gBAAkB,kBAxDvBP,aCQEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.ce3138e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LinesElipsis from \"react-lines-ellipsis\";\r\nimport \"./Movie.css\";\r\n\r\nclass Movie extends Component {\r\n  static propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Movie\">\r\n        <div className=\"Movie__Column\">\r\n          <MoviePoster poster={this.props.poster} />\r\n        </div>\r\n        <div className=\"Movie__Column\">\r\n          <h1>{this.props.title}</h1>\r\n          <div className=\"Movie__Genres\">\r\n            {this.props.genres.map((genre, index) => (\r\n              <MovieGenre genre={genre} key={index} />\r\n            ))}\r\n          </div>\r\n          <div className=\"Movie_Synopsis\">\r\n            <LinesElipsis\r\n              text={this.props.synopsis}\r\n              maxLine=\"3\"\r\n              elipsiis=\"...\"\r\n              trimRight\r\n              basedOn=\"letters\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass MoviePoster extends Component {\r\n  static propTypes = {\r\n    poster: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    return <img src={this.props.poster} alt=\"MoviePoster\" />;\r\n  }\r\n}\r\n\r\nclass MovieGenre extends Component {\r\n  static propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    return <span className=\"movie__Genre\">{this.props.genre}</span>;\r\n  }\r\n}\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentWillUpdate()-> render() -> componentDidMount()\n\n  state = {};\n\n  // 리스트를 하나 추가하고 싶다면\n  componentDidMount() {\n    this._getMovies();\n    //   .then(response => console.log(response))\n    //   .then(json => {\n    // \t  this.setState({\n    // \t\t  movies: json.data.movies\n    // \t  })\n    // \t  .then(()=> .then())\n    // \t  // CALLBACK HELL!\n    //   })\n    //catch를 써서 에러가 나면 잡아서 설명해라.\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      //console.log(movie);\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      );\n    });\n    return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi = () => {\n    return fetch(\n      \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n    )\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}